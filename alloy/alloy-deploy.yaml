
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy-cluster-reader
rules:
  - apiGroups: [""]
    resources: ["pods", "nodes", "endpoints", "services", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "deployments", "replicasets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: alloy-cluster-reader
subjects:
  - kind: ServiceAccount
    name: alloy
    namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    logging {
      level = "debug"
    }

    prometheus.remote_write "victoriametrics" {
      endpoint {
        url = "http://vm-victoria-metrics-single-server.monitoring.svc.cluster.local:8428/api/v1/write"
      }
    }

    discovery.kubernetes "pods" {
      role = "pod"
    }

    prometheus.scrape "pod_metrics" {
      targets = discovery.kubernetes.pods.targets

      relabel_configs = [
        {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"],
          action        = "keep",
          regex         = "true"
        },
        {
          source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"],
          target_label  = "__metrics_path__",
          regex         = "(.+)"
        },
        {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"],
          action        = "replace",
          target_label  = "__address__",
          regex         = "([^:]+)(?::\\d+)?;(\\d+)",
          replacement   = "$1:$2"
        },
        {
          action = "labelmap",
          regex  = "__meta_kubernetes_pod_label_(.+)"
        }
      ]

      forward_to = [prometheus.remote_write.victoriametrics.receiver]
    }

    discovery.kubernetes "nodes" {
      role = "node"
    }

    prometheus.scrape "node_metrics" {
      targets      = discovery.kubernetes.nodes.targets
      metrics_path = "/metrics"
      scheme       = "http"

      forward_to = [prometheus.remote_write.victoriametrics.receiver]
    }

    prometheus.scrape "kubelet" {
      targets = discovery.kubernetes.nodes.targets

      metrics_path = "/metrics"
      scheme       = "https"

      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
      }

      authorization {
        credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      }

      relabel_configs = [
        {
          source_labels = ["__address__"],
          target_label  = "__address__",
          regex         = "([^:]+)(?::\\d+)?",
          replacement   = "$1:10250"
        },
        {
          source_labels = ["__meta_kubernetes_node_name"],
          target_label  = "node"
        }
      ]

      forward_to = [prometheus.remote_write.victoriametrics.receiver]
    }

    discovery.kubernetes "apiserver" {
      role = "endpoints"
    }

    prometheus.scrape "apiserver_metrics" {
      targets      = discovery.kubernetes.apiserver.targets
      scheme       = "https"
      metrics_path = "/metrics"

      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = false
      }

      authorization {
        credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      }

      relabel_configs = [
        {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_service_name", "__meta_kubernetes_endpoint_port_name"],
          action        = "keep",
          regex         = "default;kubernetes;https"
        }
      ]

      forward_to = [prometheus.remote_write.victoriametrics.receiver]
    }
